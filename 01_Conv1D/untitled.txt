IRCNN(
  (conv): Sequential(
    (0): Conv1d(1, 32, kernel_size=(4,), stride=(4,))
    (1): LeakyReLU(negative_slope=0.01)
    (2): Conv1d(32, 32, kernel_size=(2,), stride=(2,))
    (3): LeakyReLU(negative_slope=0.01)
    (4): Conv1d(32, 128, kernel_size=(2,), stride=(2,))
    (5): LeakyReLU(negative_slope=0.01)
    (6): Conv1d(128, 128, kernel_size=(2,), stride=(2,))
    (7): LeakyReLU(negative_slope=0.01)
    (8): Conv1d(128, 128, kernel_size=(2,), stride=(2,))
    (9): LeakyReLU(negative_slope=0.01)
    (10): Conv1d(128, 1, kernel_size=(2,), stride=(2,))
    (11): LeakyReLU(negative_slope=0.01)
  )
  (fcn1): LazyLinear(in_features=0, out_features=1000, bias=True)
  (fcn2): Linear(in_features=1000, out_features=64, bias=True)
)


IRCNN(
  (conv): Sequential(
    (0): Conv1d(1, 32, kernel_size=(4,), stride=(4,))
    (1): LeakyReLU(negative_slope=0.01)
    (2): Conv1d(32, 32, kernel_size=(8,), stride=(1,))
    (3): LeakyReLU(negative_slope=0.01)
    (4): Conv1d(32, 128, kernel_size=(2,), stride=(1,))
    (5): LeakyReLU(negative_slope=0.01)
    (6): Conv1d(128, 128, kernel_size=(2,), stride=(1,))
    (7): LeakyReLU(negative_slope=0.01)
    (8): Conv1d(128, 128, kernel_size=(2,), stride=(1,))
    (9): LeakyReLU(negative_slope=0.01)
    (10): Conv1d(128, 1, kernel_size=(2,), stride=(2,))
    (11): LeakyReLU(negative_slope=0.01)
  )
  (fcn1): LazyLinear(in_features=0, out_features=1000, bias=True)
  (fcn2): Linear(in_features=1000, out_features=64, bias=True)
)

        super(IRCNN,self).__init__()
        
        self.c1 = nn.Conv1d(in_channels, 32, 4, stride=4)
        self.nl1 = nn.LeakyReLU(negative_slope)
        
        self.c2 = nn.Conv1d(32, 32, 16, stride=1, padding='same')
        self.nl2 =nn.LeakyReLU(negative_slope)
        self.c3 = nn.Conv1d(32, 32, 8, stride=2, padding='same')
        self.nl3 =nn.LeakyReLU(negative_slope)
            
        self.c4 = nn.Conv1d(32, 128, 2, stride=1),
        self.c2 = nn.LeakyReLU(negative_slope),
            nn.Conv1d(128, 128, 2, stride=1),
            nn.LeakyReLU(negative_slope),
            nn.Conv1d(128, 128, 2, stride=1),
            nn.LeakyReLU(negative_slope),

            nn.Conv1d(128, out_channels, 2, stride=2),
            nn.LeakyReLU(negative_slope)
        )
        self.fcn1 = nn.LazyLinear(1000)
        self.nonlin = nn.LeakyReLU(negative_slope)
        self.fcn2 = nn.Linear(1000, out_dim)



class IRCNN(nn.Module):
    def __init__(self, in_channels, out_channels, out_dim, negative_slope=0.01):
        super(IRCNN,self).__init__()
        
        self.conv = nn.Sequential(
            nn.Conv1d(in_channels, 32, 4, stride=4),
            nn.LeakyReLU(negative_slope),
            nn.Conv1d(32, 32, 16, stride=2),
            nn.LeakyReLU(negative_slope),
            nn.Conv1d(32, 32, 8, stride=2),
            nn.LeakyReLU(negative_slope),
            
            nn.Conv1d(32, 128, 2, stride=1),
            nn.LeakyReLU(negative_slope),
            nn.Conv1d(128, 128, 2, stride=1),
            nn.LeakyReLU(negative_slope),
            nn.Conv1d(128, 128, 2, stride=2),
            nn.LeakyReLU(negative_slope),

            nn.Conv1d(128, out_channels, 2, stride=2),
            nn.LeakyReLU(negative_slope)
        )
        self.fcn1 = nn.LazyLinear(120)
        self.nl1 = nn.LeakyReLU(negative_slope)
        self.fcn2 = nn.Linear(120, 512)
        self.nl2 = nn.LeakyReLU(negative_slope)
        self.fcn3 = nn.Linear(512, out_dim)

IRCNN(
  (conv): Sequential(
    (0): Conv1d(1, 32, kernel_size=(4,), stride=(4,))
    (1): LeakyReLU(negative_slope=0.01)
    (2): Conv1d(32, 32, kernel_size=(16,), stride=(2,))
    (3): LeakyReLU(negative_slope=0.01)
    (4): Conv1d(32, 32, kernel_size=(8,), stride=(2,))
    (5): LeakyReLU(negative_slope=0.01)
    (6): Conv1d(32, 128, kernel_size=(2,), stride=(1,))
    (7): LeakyReLU(negative_slope=0.01)
    (8): Conv1d(128, 128, kernel_size=(2,), stride=(1,))
    (9): LeakyReLU(negative_slope=0.01)
    (10): Conv1d(128, 128, kernel_size=(2,), stride=(2,))
    (11): LeakyReLU(negative_slope=0.01)
    (12): Conv1d(128, 1, kernel_size=(2,), stride=(2,))
    (13): LeakyReLU(negative_slope=0.01)
  )
  (fcn1): LazyLinear(in_features=0, out_features=120, bias=True)
  (nl1): LeakyReLU(negative_slope=0.01)
  (fcn2): Linear(in_features=120, out_features=512, bias=True)
  (nl2): LeakyReLU(negative_slope=0.01)
  (fcn3): Linear(in_features=512, out_features=64, bias=True)
)



############################################# Yu Paper - conv02 ######################

IRCNN(
  (conv): Sequential(
    (0): Conv1d(1, 32, kernel_size=(4,), stride=(4,))
    (1): Conv1d(32, 32, kernel_size=(2,), stride=(2,))
    (2): Conv1d(32, 128, kernel_size=(8,), stride=(8,))
    (3): Conv1d(128, 128, kernel_size=(2,), stride=(2,))
    (4): Conv1d(128, 512, kernel_size=(2,), stride=(2,))
    (5): Conv1d(512, 512, kernel_size=(4,), stride=(4,))
    (6): Conv1d(512, 1024, kernel_size=(2,), stride=(2,))
    (7): Conv1d(1024, 1024, kernel_size=(1,), stride=(1,))
    (8): Flatten(start_dim=1, end_dim=-1)
  )
  (fcn1): LazyLinear(in_features=0, out_features=160, bias=True)
  (fcn2): Linear(in_features=160, out_features=64, bias=True)
)

#### 0.05 ms - 0.95 ms split
IRCNN(
  (conv): Sequential(
    (0): Conv1d(1, 32, kernel_size=(4,), stride=(4,))
    (1): Conv1d(32, 32, kernel_size=(2,), stride=(2,))
    (2): Conv1d(32, 128, kernel_size=(8,), stride=(8,))
    (3): Conv1d(128, 128, kernel_size=(2,), stride=(2,))
    (4): Conv1d(128, 512, kernel_size=(2,), stride=(2,))
    (5): Conv1d(512, 512, kernel_size=(4,), stride=(4,))
    (6): Conv1d(512, 1024, kernel_size=(2,), stride=(2,))
    (7): Conv1d(1024, 1024, kernel_size=(1,), stride=(1,))
    (8): Flatten(start_dim=1, end_dim=-1)
  )
  (fcn1): LazyLinear(in_features=0, out_features=160, bias=True)
  (fcn2): Linear(in_features=160, out_features=45600, bias=True)
)